https://spring.io/blog/2019/10/17/spring-cloud-stream-functional-and-reactive
https://cloud.spring.io/spring-cloud-stream/reference/html/spring-cloud-stream.html#spring_cloud_function

-----------------------------------------------------------------------------
Spring Cloud Function Support
-----------------------------------------------------------------------------
Alternative for @EnableBinding and @StreamListener (were required in previous
Cloud Stream versions)

spring-cloud-stream and binder dependencies look for beans of type Consumer,
Supplier, Function (or any beans that could be mapped to) to bind to
destinations

- Function/Consumer: message handler
- Supplier: message source - bean is called every second by default

-----------------------------------------------------------------------------
1 function Bean per app
-----------------------------------------------------------------------------
only 1 Consumer, Supplier, Function bean is possible per app

if there are more in the, specify with
 => spring.cloud.function.definition

the others will not be bound

-----------------------------------------------------------------------------
Binding
-----------------------------------------------------------------------------
@Bean           default binding destinations
- Consumer        input
- Supplier        output    (called every second by default)
- Function        input, output

input and output bindings are generated by using the naming convention
<function-name>-<in/out>-<index>

-----------------------------------------------------------------------------
Supplier @Bean
-----------------------------------------------------------------------------
- periodically triggered every 1s
    => spring.integration.poller.fixed-delay

- sends result to default MessageChannel "output"
    => spring.cloud.stream.bindings.output.destination

- if there is more than 1 Supplier bean, define bean name to be bound to
  binding desitnations with:
    => spring.cloud.function.definition

NOTE: not the bean is called periodically, just the supplier

    // BAD
    @Bean
    public Supplier<String> stringSource() {
        final String string = StaticStrings.get();
        log.info(">> stringSource - {}", string);       // only called once (bean creation)
        return () -> string;
    }

    // GOOD
    @Bean
    public Supplier<String> stringSource() {
        return () -> {
            final String string = StaticStrings.get();
            log.info(">> stringSource - {}", string);   // called periodically
            return string;
        };
    }